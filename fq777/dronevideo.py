import socket
import time
from opencvtest import decode

DATA = [
            bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
                0x00, 0x0F, 0x32, 0x81, 0x95, 0x45, 0x2E, 0xF5, 0xE1, 0xA9,
                0x28, 0x10, 0x86, 0x63, 0x17, 0x36, 0xC3, 0xCA, 0xE2, 0x64,
                0x30, 0xA3, 0xC1, 0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95,
                0xE0, 0x30, 0xB7, 0xC2, 0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65,
                0x9E, 0xB2, 0xE2, 0xD5, 0xE0, 0xC2, 0xCB, 0x6C, 0x59, 0xCD,
                0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0, 0xCE, 0x8E, 0xE8, 0xDF,
                0x32, 0x45, 0x6F, 0xA8, 0x42, 0xB7, 0x33, 0x0F, 0xB7, 0xC9,
                0x57, 0x82, 0xFC, 0x3D, 0x67, 0xE7, 0xC3, 0xA6, 0x67, 0x28,
                0xDA, 0xD8, 0xB5, 0x98, 0x48, 0xC7, 0x67, 0x0C, 0x94, 0xB2,
                0x9B, 0x54, 0xD2, 0x37, 0x9E, 0x2E, 0x7A]),

            bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
                0x00, 0x54, 0xB2, 0xD1, 0xF6, 0x63, 0x48, 0xC7, 0xCD, 0xB6,
                0xE0, 0x5B, 0x0D, 0x1D, 0xBC, 0xA8, 0x1B, 0xCA, 0xE2, 0x64,
                0x30, 0xA3, 0xC1, 0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95,
                0xE0, 0x30, 0xB7, 0xC2, 0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65,
                0x9E, 0xB2, 0xE2, 0xD5, 0xE0, 0xC2, 0xCB, 0x6C, 0x59, 0xCD,
                0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0, 0xCE, 0x8E, 0xE8, 0xDF,
                0x32, 0x45, 0x6F, 0xA8, 0x42, 0xB7, 0x33, 0x0F, 0xB7, 0xC9,
                0x57, 0x82, 0xFC, 0x3D, 0x67, 0xE7, 0xC3, 0xA6, 0x67, 0x28,
                0xDA, 0xD8, 0xB5, 0x98, 0x48, 0xC7, 0x67, 0x0C, 0x94, 0xB2,
                0x9B, 0x54, 0xD2, 0x37, 0x9E, 0x2E, 0x7A])
        ]

DATA1 = bytearray([0x49, 0x54, 0x64, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
            0x80, 0x86, 0x38, 0xC3, 0x8D, 0x13, 0x50, 0xFD, 0x67, 0x41, 0xC2,
            0xEE, 0x36, 0x89, 0xA0, 0x54, 0xCA, 0xE2, 0x64, 0x30, 0xA3, 0xC1,
            0x5E, 0x40, 0xDE, 0x30, 0xF6, 0xD6, 0x95, 0xE0, 0x30, 0xB7, 0xC2,
            0xE5, 0xB7, 0xD6, 0x5D, 0xA8, 0x65, 0x9E, 0xB2, 0xE2, 0xD5, 0xE0,
            0xC2, 0xCB, 0x6C, 0x59, 0xCD, 0xCB, 0x66, 0x1E, 0x7E, 0x1E, 0xB0,
            0xCE, 0x8E, 0xE8, 0xDF, 0x32, 0x45, 0x6F, 0xA8, 0x42, 0xEB, 0x20,
            0xBE, 0x38, 0x3A, 0xAB, 0x05, 0xA8, 0xC2, 0xA7, 0x1F, 0x2C, 0x90,
            0x6D, 0x93, 0xF7, 0x2A, 0x85, 0xE7, 0x35, 0x6E, 0xFF, 0xE1, 0xB8,
            0xF5, 0xAF, 0x09, 0x7F, 0x91, 0x47, 0xF8, 0x7E])

class DroneVideo(object):

    def __init__(self):
        self.fh = open("fpv.mp4", 'wb')
        self.ip = '172.16.10.1'
        self.port = 8888
        self.open_sockets()

    def open_sockets(self):
        connected = False
        while not connected:
            try:
                print("trying to open sockets...")
                self.video = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.video.connect((self.ip, self.port))
                self.video.settimeout(0.1)
                print("video started")
                self.video.send(DATA[0])
                print("video link", len(self.video.recv(8192)))
                self.video.send(DATA[1])
                print("video link", len(self.video.recv(8192)))
                connected = True
            except Exception as e:
                print(e)

        self.stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.stream.connect((self.ip, self.port))
        self.stream.send(DATA1)
        self.video.setblocking(False)


        self.stream.settimeout(0.1)

        self.count = 0

    def reconnect(self):
        self.stream.close()
        self.video.close()
        #self.video.send(DATA[0])
        #self.video.send(DATA[1])
        self.open_sockets()

    def fetch_video(self):
        try:
            data = self.stream.recv(8192)
            self.fh.write(data)
            return data
        except socket.timeout:
            self.reconnect()
            return None

    def close(self):
        self.video.close()
        self.stream.close()


import os

if __name__ == "__main__":
    start = time.time()
    d  = DroneVideo()
    #videobuffer = StringIO.StringIO()

    started = False
    for i in range(1000):
        newdata = d.fetch_video()
        if newdata is not None:
            with open("last.mp4", 'ab') as f:
                f.write(newdata)

        frames = decode("last.mp4")
        if frames > 10:
            videobuffer = ""
            os.remove('last.mp4')



    print("code run for ", time.time()-start)